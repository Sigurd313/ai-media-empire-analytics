#!/usr/bin/env python3
"""
Generate README report from collected data
"""

import json
import pandas as pd
from datetime import datetime, timedelta

def generate_report():
    """Generate markdown report for README"""
    
    # Load latest data
    with open('data/latest.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Load historical data for growth calculation
    try:
        df = pd.read_csv('data/youtube_stats.csv')
        df['timestamp'] = pd.to_datetime(df['timestamp'])
    except:
        df = pd.DataFrame()
    
    # Start report
    report = f"# ðŸ“Š AI Media Empire - YouTube Analytics\n\n"
    report += f"*Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M')} UTC*\n\n"
    
    # Summary stats
    total_subs = sum(ch['subscribers'] for ch in data['channels'])
    total_views = sum(ch['views'] for ch in data['channels'])
    total_videos = sum(ch['videos'] for ch in data['channels'])
    
    report += f"## ðŸ“ˆ Summary\n\n"
    report += f"- **Total Subscribers**: {total_subs:,}\n"
    report += f"- **Total Views**: {total_views:,}\n"
    report += f"- **Total Videos**: {total_videos:,}\n"
    report += f"- **Channels Tracked**: {len(data['channels'])}\n\n"
    
    # Channel details
    report += f"## ðŸ“º Channel Statistics\n\n"
    report += "| Channel | Subscribers | Views | Videos | Daily Growth |\n"
    report += "|---------|------------|-------|--------|-------------|\n"
    
    for channel in data['channels']:
        # Calculate daily growth if historical data exists
        growth = "N/A"
        if not df.empty:
            yesterday = datetime.now() - timedelta(days=1)
            hist = df[(df['channel_id'] == channel['channel_id']) & 
                     (df['timestamp'].dt.date <= yesterday.date())]
            if not hist.empty:
                last_subs = hist.iloc[-1]['subscribers']
                growth = f"{channel['subscribers'] - last_subs:+,}"
        
        report += f"| {channel['title']} | {channel['subscribers']:,} | {channel['views']:,} | {channel['videos']} | {growth} |\n"
    
    # Recent videos
    report += f"\n## ðŸŽ¬ Recent Videos\n\n"
    
    # Sort videos by views
    videos = sorted(data['recent_videos'], key=lambda x: x['views'], reverse=True)[:10]
    
    for i, video in enumerate(videos, 1):
        report += f"{i}. **{video['title']}**\n"
        report += f"   - Channel: {video['channel_title']}\n"
        report += f"   - Views: {video['views']:,} | Likes: {video['likes']:,} | Comments: {video['comments']:,}\n"
        report += f"   - Published: {video['published_at'][:10]}\n\n"
    
    # Data access
    report += f"## ðŸ”— Data Access\n\n"
    report += f"- **Latest data (JSON)**: [data/latest.json](data/latest.json)\n"
    report += f"- **Historical data (CSV)**: [data/youtube_stats.csv](data/youtube_stats.csv)\n"
    report += f"- **Raw endpoint**: `https://raw.githubusercontent.com/YOUR_USERNAME/ai-media-empire-analytics/main/data/latest.json`\n\n"
    
    report += f"## ðŸ“… Update Schedule\n\n"
    report += f"Data is automatically collected every hour via GitHub Actions.\n\n"
    
    report += f"---\n"
    report += f"*Generated by AI Media Empire Analytics Bot*\n"
    
    # Save report
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("âœ… Report generated successfully!")

if __name__ == "__main__":
    generate_report()
